# -*- coding: utf-8 -*-
"""LogisticRegression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cBy6osr3F0E9yHGwKipE2lcRF0G6yzZj
"""

# Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, roc_curve, classification_report

data = pd.read_csv("Titanic_train.csv")
data_test = pd.read_csv("Titanic_test.csv")

# Look at first 5 rows
print(data.head())
print(data_test.head())

# Info about dataset (columns, datatypes, missing values)
print(data.info())
print(data_test.info())

# Summary statistics (numerical columns)
print(data.describe())
print(data_test.describe())

# Check missing values
print(data.isnull().sum())
print('\n',data_test.isnull().sum())

# Fill missing Age with median
data["Age"].fillna(data["Age"].median(), inplace=True)

# Fill missing Embarked with mode (most frequent value)
data["Embarked"].fillna(data["Embarked"].mode()[0], inplace=True)

# Drop Cabin column (too many missing values)
data.drop("Cabin", axis=1, inplace=True)

# Fill missing Age with median
data_test["Age"].fillna(data_test["Age"].median(), inplace=True)

# Fill missing Embarked with mode (most frequent value)
data_test["Embarked"].fillna(data_test["Embarked"].mode()[0], inplace=True)

# Drop Cabin column (too many missing values)
data_test.drop("Cabin", axis=1, inplace=True)

# Check missing values
print(data.isnull().sum())
print('\n',data_test.isnull().sum())

# Visualize survival count
sns.countplot(x="Survived", data=data)
plt.title("Survival Count")
plt.show()

# Boxplot of Age by Survival
sns.boxplot(x="Survived", y="Age", data=data)
plt.title("Age vs Survival")
plt.show()

# Heatmap for correlations
sns.heatmap(data.corr(numeric_only=True), annot=True, cmap="coolwarm")
plt.title("Correlation Heatmap")
plt.show()

# Encode categorical columns (Sex, Embarked)
label = LabelEncoder()
data["Sex"] = label.fit_transform(data["Sex"])  # Male=1, Female=0
data["Embarked"] = label.fit_transform(data["Embarked"])

# Drop PassengerId, Name, Ticket (not useful for prediction)
data.drop(["PassengerId", "Name", "Ticket"], axis=1, inplace=True)

# 3. MODEL BUILDING
# -------------------

# Define features (X) and target (y)
X = data.drop("Survived", axis=1)
y = data["Survived"]

# Split into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build logistic regression model
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

# 4. MODEL EVALUATION
# ----------------------

# Predictions
y_pred = model.predict(X_test)
y_pred_prob = model.predict_proba(X_test)[:,1]

# Metrics
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Precision:", precision_score(y_test, y_pred))
print("Recall:", recall_score(y_test, y_pred))
print("F1-Score:", f1_score(y_test, y_pred))
print("ROC-AUC:", roc_auc_score(y_test, y_pred_prob))

# Classification Report
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# ROC Curve
fpr, tpr, _ = roc_curve(y_test, y_pred_prob)
plt.plot(fpr, tpr, label="Logistic Regression")
plt.plot([0,1], [0,1], "k--")
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("ROC Curve")
plt.legend()
plt.show()

# 5. INTERPRETATION
# --------------------

# Coefficients of logistic regression
coefficients = pd.DataFrame({
    "Feature": X.columns,
    "Coefficient": model.coef_[0]
})
print(coefficients)

# 6. DEPLOYMENT WITH STREAMLIT (save model for later use)
# ---------------------------------------------------------

import pickle

# Save trained model
with open("logistic_model.pkl", "wb") as file:
    pickle.dump(model, file)

print("‚úÖ Model saved! You can load this in Streamlit for deployment.")

import streamlit as st

# Load the saved logistic regression model
with open("logistic_model.pkl", "rb") as file:
    model = pickle.load(file)

st.title("üö¢ Titanic Survival Prediction App")
st.write("Enter passenger details to predict the survival probability.")

# Sidebar inputs
pclass = st.selectbox("Passenger Class (1 = 1st, 2 = 2nd, 3 = 3rd)", [1, 2, 3])
sex = st.radio("Sex", ["Male", "Female"])
age = st.slider("Age", 0, 80, 25)
sibsp = st.number_input("Number of Siblings/Spouses aboard (SibSp)", min_value=0, max_value=10, value=0)
parch = st.number_input("Number of Parents/Children aboard (Parch)", min_value=0, max_value=10, value=0)
fare = st.number_input("Fare Ticket Price", min_value=0.0, max_value=600.0, value=32.0)
embarked = st.selectbox("Port of Embarkation", ["C = Cherbourg", "Q = Queenstown", "S = Southampton"])

# Convert categorical values into numerical (as per preprocessing)
sex_num = 1 if sex == "Male" else 0
embarked_map = {"C = Cherbourg": 0, "Q = Queenstown": 1, "S = Southampton": 2}
embarked_num = embarked_map[embarked]

# Make input dataframe
input_data = pd.DataFrame({
    "Pclass": [pclass],
    "Sex": [sex_num],
    "Age": [age],
    "SibSp": [sibsp],
    "Parch": [parch],
    "Fare": [fare],
    "Embarked": [embarked_num]
})

# Prediction
if st.button("Predict Survival"):
    prediction = model.predict(input_data)[0]
    probability = model.predict_proba(input_data)[0][1]

    if prediction == 1:
        st.success(f"‚úÖ Passenger is likely to SURVIVE (Probability: {probability:.2f})")
    else:
        st.error(f"‚ùå Passenger is likely to NOT SURVIVE (Probability: {probability:.2f})")

st.write("---")
st.caption("Model: Logistic Regression trained on Titanic dataset.")

